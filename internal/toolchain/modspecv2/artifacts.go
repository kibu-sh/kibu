package modspecv2

import (
	"fmt"
	"github.com/dave/jennifer/jen"
	"go/types"
	"golang.org/x/tools/go/analysis"
	"os"
	"path/filepath"
	"strings"
)

func SaveArtifacts(moduleRoot string, artifacts []Artifact) ([]string, error) {
	var outFiles []string
	for _, artifact := range artifacts {
		outfile, err := saveArtifact(moduleRoot, artifact)
		if err != nil {
			return outFiles, err
		}

		outFiles = append(outFiles, outfile)
	}
	return outFiles, nil
}

func GenGoExt(name string) string {
	return fmt.Sprintf("%s.gen.go", name)
}

func saveArtifact(moduleRoot string, artifact Artifact) (string, error) {
	filename := filepath.Join(moduleRoot, artifact.OutputPath())
	file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return "", err
	}
	defer func(file *os.File) {
		_ = file.Close()
	}(file)

	return filename, artifact.File().Render(file)
}

func RelPathFromPass(pass *analysis.Pass) string {
	return strings.Replace(pass.Pkg.Path(), pass.Module.Path, "", 1)
}

func NewJenFileFromPackage(pkg *types.Package) *jen.File {
	f := jen.NewFilePath(pkg.Path())
	f.HeaderComment("Code generated by kibu. DO NOT EDIT.")
	return f
}

func GatherArtifacts(results []*analysis.Pass) (artifacts []Artifact) {
	for _, pass := range results {
		for _, result := range pass.ResultOf {
			if artifact, ok := result.(Artifact); ok {
				artifacts = append(artifacts, artifact)
			}
		}
	}
	return
}

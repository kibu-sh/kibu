package codegen

import (
	"bytes"
	"github.com/dave/jennifer/jen"
	"github.com/discernhq/devx/internal/parser"
	"github.com/discernhq/devx/internal/parser/smap"
	"os"
	"path/filepath"
)

type GeneratorOptions struct {
	FileSet        FileSet
	GenerateParams GenerateParams
	PackageList    smap.Map[parser.PackagePath, *parser.Package]
}

type GeneratorFunc func(opts *GeneratorOptions) (err error)

type Pipeline []GeneratorFunc

type GenerateParams struct {
	Dir       string
	Pipeline  Pipeline
	Patterns  []string
	OutputDir string
}

type FilePath string
type PackageName string
type FileSet map[FilePath]*jen.File

func NewFileSet() FileSet {
	return make(FileSet)
}
func (fs FileSet) NewFile(filePath FilePath, packageName PackageName) *jen.File {
	f := jen.NewFile(string(packageName))
	f.HeaderComment("Code generated by devx. DO NOT EDIT.")
	fs[filePath] = f
	return f
}

func (fs FileSet) Get(filePath FilePath, packageName PackageName) (f *jen.File) {
	f, ok := fs[filePath]
	if ok {
		return
	}
	return fs.NewFile(filePath, packageName)
}

func Generate(params GenerateParams) (err error) {
	fset := NewFileSet()
	_ = os.RemoveAll(params.OutputDir)
	if err = os.MkdirAll(params.OutputDir, os.ModePerm); err != nil {
		return
	}

	pkgList, err := parser.ExperimentalParse(params.Dir, params.Patterns...)
	if err != nil {
		return
	}

	for _, generateFunc := range params.Pipeline {
		if err = generateFunc(&GeneratorOptions{
			FileSet:        fset,
			GenerateParams: params,
			PackageList:    pkgList,
		}); err != nil {
			return
		}
	}

	for filePath, file := range fset {
		fp := string(filePath)

		if err = os.MkdirAll(filepath.Dir(fp), os.ModePerm); err != nil {
			return
		}

		contents := new(bytes.Buffer)
		if err = file.Render(contents); err != nil {
			return
		}

		// ensure file ends with a new line
		// this keeps the txtar format clean
		contents.WriteString("\n")
		if err = os.WriteFile(fp, contents.Bytes(), os.ModePerm); err != nil {
			return
		}
	}

	return
}

func packageScopedFilePath(pkg *parser.Package) (FilePath, PackageName) {
	return FilePath(filepath.Join(string(pkg.Path), pkg.GoPackage.Name+".gen.go")), PackageName(pkg.GoPackage.Name)
}

func DefaultPipeline() Pipeline {
	return Pipeline{
		BuildServiceHTTPHandlerFactories,
		BuildWorkerProxies,
		BuildHTTPHandlerProviders,
		BuildWorkerProviders,
		BuildWireSet,
	}
}

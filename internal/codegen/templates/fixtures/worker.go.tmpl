{{ $pkg := .Name -}}
{{ $worker := .Worker -}}
{{ $methods := .Worker.Methods -}}
// Code generated by devx. DO NOT EDIT.

package {{ $pkg }}

import (
	"github.com/discernhq/devx/pkg/transport/temporal"

	{{- if eq $worker.Type "activity" }}
	"time"
	"go.temporal.io/sdk/workflow"
	{{ else}}
	"context"
	"go.temporal.io/sdk/client"
	{{ end }}
)

{{- if eq $worker.Type "workflow" }}

type {{ .Worker.Name }}Proxy struct {
	Temporal client.Client
}

{{ range $worker.Methods }}
func (w *{{$worker.Name}}Proxy) {{.Name}}(ctx context.Context, id string, {{.Request.Name}} {{.Request.Type}}) ({{.Response.Name}} {{.Response.Type}}, err error) {
	run, err := w.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
		ID:                                       id,
		TaskQueue:                                {{ $worker.TaskQueue | printf "%q" }},
	}, "{{ $pkg }}.{{$worker.Name}}.{{.Name}}", req)
	if err != nil {
		return
	}
	err = run.Get(ctx, &res)
	return
}
{{- end }}

func (wf *{{$worker.Name}}) WorkflowFactory() []*temporal.Workflow {
	return []*temporal.Workflow{
		{{- range $worker.Methods }}
		temporal.NewWorkflow("{{ $pkg }}.{{$worker.Name}}.{{.Name}}", wf.{{.Name}}),
		{{- end }}
	}
}

{{- end }}


{{- if eq .Worker.Type "activity" }}

type {{$worker.Name}}Proxy struct {}

{{ range $worker.Methods }}
func (act {{$worker.Name}}Proxy) {{.Name}}(ctx workflow.Context, {{.Request.Name}} {{.Request.Type}}) ({{.Response.Name}} {{.Response.Type}}, err error) {
	err = workflow.ExecuteActivity(workflow.WithActivityOptions(ctx, workflow.ActivityOptions{
		StartToCloseTimeout:    time.Second * 30,
	}), "{{ $pkg }}.{{$worker.Name}}.{{.Name}}", req).Get(ctx, &res)
	return
}
{{- end }}

func (act *{{$worker.Name}}) ActivityFactory() []*temporal.Activity {
	return []*temporal.Activity{
		{{- range $worker.Methods }}
		temporal.NewActivity("{{ $pkg }}.{{$worker.Name}}.{{.Name}}", act.{{.Name}}),
		{{- end }}
	}
}

{{- end }}
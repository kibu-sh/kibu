// Code generated by devx. DO NOT EDIT.

package {{ .Name }}

import (
	"time"

	"go.temporal.io/sdk/activity"
	"go.temporal.io/sdk/client"
	"go.temporal.io/sdk/worker"
	"go.temporal.io/sdk/workflow"
)

{{ range .Types -}}
type {{ .Name }} struct {
	{{- range .Fields }}
	{{ .Name }} {{ .Type }} `json:"{{ .Name | to_snake }}"`
	{{- end }}
}
{{ end }}


type WorkflowClient struct{}
type ActivityClient struct{}

type Future[T any] struct {
	tf workflow.Future
}

func (f *Future[T]) IsReady() bool {
	return f.tf.IsReady()
}

func (f *Future[T]) Get(ctx workflow.Context) (res T, err error) {
	err = f.tf.Get(ctx, &res)
	return
}

{{ $worker := .Worker }}

{{ range .Worker.Activities }}
func (ac *ActivityClient) {{.Name}}(ctx workflow.Context, req {{.Request.Name}}) Future[{{.Response.Name}}] {
	return Future[{{.Response.Name}}]{
		workflow.ExecuteActivity(workflow.WithActivityOptions(ctx, workflow.ActivityOptions{
			TaskQueue: "{{ $worker.TaskQueue }}",
			StartToCloseTimeout: 10 * time.Second,
		}), "{{.Name}}", req),
	}
}
{{end}}


func NewWorker (c client.Client) (wrk worker.Worker, err error) {
	wrk = worker.New(c, "{{ .Worker.TaskQueue }}", worker.Options{})
	wf, err := NewWorkflows()
	if err != nil {
		return
	}

	act, err := NewActivities()
	if err != nil {
		return
	}

	{{ range .Worker.Workflows -}}
	wrk.RegisterWorkflowWithOptions(wf.{{.Name }}, workflow.RegisterOptions{
		Name: "{{ .Name }}",
	})
	{{- end }}

	{{ range .Worker.Activities -}}
	wrk.RegisterActivityWithOptions(act.{{ .Name }}, activity.RegisterOptions{
		Name: "{{ .Name }}",
	})
	{{- end }}

	return
}
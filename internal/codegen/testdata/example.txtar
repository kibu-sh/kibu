parse $WORK
cmp exp/pkg/auth/auth.gen.go $WORK/src/pkg/auth/auth.gen.go
cmp exp/gen/devxgen/wire_set.gen.go $WORK/gen/devxgen/wire_set.gen.go
! exists src/pkg/nope/nope.gen.go

#parse $WORK
#cmp exp/pkg/auth/auth.gen.go $WORK/src/pkg/auth/auth.gen.go
#cmp exp/gen/devxgen/wire_set.gen.go $WORK/gen/devxgen/wire_set.gen.go

-- src/go.mod --
module github.com/example/module

-- exp/gen/devxgen/wire_set.gen.go --
// Code generated by devx. DO NOT EDIT.

package devxgen

import (
	httpx "github.com/discernhq/devx/pkg/transport/httpx"
	temporal "github.com/discernhq/devx/pkg/transport/temporal"
	auth "github.com/example/module/pkg/auth"
	example "github.com/example/module/pkg/example"
	wire "github.com/google/wire"
)

type HTTPHandlerFactoryDeps struct {
	AuthService    *auth.service
	ExampleService *example.Service
}

func ProvideHTTPHandlers(deps *HTTPHandlerFactoryDeps) (handlers []*httpx.Handler) {
	handlers = append(handlers, deps.AuthService.HTTPHandlerFactory()...)
	handlers = append(handlers, deps.ExampleService.HTTPHandlerFactory()...)
	return
}

type WorkerFactoryDeps struct {
	AuthActivities    *auth.activities
	AuthWorkflows     *auth.workflows
	ExampleActivities *example.Activities
	ExampleWorkflows  *example.Workflows
}

func ProvideWorkers(deps *WorkerFactoryDeps) (workers []*temporal.Worker) {
	workers = append(workers, deps.AuthActivities.WorkerFactory()...)
	workers = append(workers, deps.AuthWorkflows.WorkerFactory()...)
	workers = append(workers, deps.ExampleActivities.WorkerFactory()...)
	workers = append(workers, deps.ExampleWorkflows.WorkerFactory()...)
	return
}

var WireSet = wire.NewSet(
	ProvideHTTPHandlers,
	ProvideWorkers,
	wire.Struct(new(HTTPHandlerFactoryDeps), "*"),
	wire.Struct(new(WorkerFactoryDeps), "*"),
	wire.Struct(new(auth.service), "*"),
	wire.Struct(new(example.Service), "*"),
	wire.Struct(new(auth.activities), "*"),
	wire.Struct(new(auth.activities__Proxy), "*"),
	wire.Struct(new(auth.workflows), "*"),
	wire.Struct(new(auth.workflows__Proxy), "*"),
	wire.Struct(new(example.Activities), "*"),
	wire.Struct(new(example.Activities__Proxy), "*"),
	wire.Struct(new(example.Workflows), "*"),
	wire.Struct(new(example.Workflows__Proxy), "*"),
	auth.InitActivityDeps,
	auth.InitServiceDeps,
	auth.InitWorkflowDeps,
	wire.Struct(new(auth.StructProvider), "*"),
)
-- exp/pkg/auth/auth.gen.go --
// Code generated by devx. DO NOT EDIT.

package auth

import (
	"context"
	transport "github.com/discernhq/devx/pkg/transport"
	httpx "github.com/discernhq/devx/pkg/transport/httpx"
	temporal "github.com/discernhq/devx/pkg/transport/temporal"
	client "go.temporal.io/sdk/client"
	workflow "go.temporal.io/sdk/workflow"
	"time"
)

func (svc *service) HTTPHandlerFactory() []*httpx.Handler {
	return []*httpx.Handler{
		httpx.NewHandler("/verify", transport.NewEndpoint(svc.Verify)).WithMethods("GET"),
	}
}
func (act *activities) WorkerFactory() []*temporal.Worker {
	return []*temporal.Worker{
		&temporal.Worker{
			Name:      "auth.activities.Verify",
			Type:      "activity",
			TaskQueue: "default",
			Handler:   act.Verify,
		},
	}
}

type activities__Proxy struct{}

func (p activities__Proxy) Verify(ctx workflow.Context, req VerifyRequest) (res VerifyResponse, err error) {
	err = workflow.ExecuteActivity(workflow.WithActivityOptions(ctx, workflow.ActivityOptions{
		StartToCloseTimeout: time.Second * 30,
	}), "auth.activities.Verify", req).Get(ctx, &res)
	return
}
func (wkr *workflows) WorkerFactory() []*temporal.Worker {
	return []*temporal.Worker{
		&temporal.Worker{
			Name:      "auth.workflows.Verify",
			Type:      "workflow",
			TaskQueue: "default",
			Handler:   wkr.Verify,
		},
	}
}

type workflows__Proxy struct {
	Temporal client.Client
}

func (p workflows__Proxy) Verify(ctx context.Context, id string, req VerifyRequest) (res VerifyResponse, err error) {
	run, err := p.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
		ID:        id,
		TaskQueue: "default",
	}, "auth.workflows.Verify", req)
	if err != nil {
		return
	}
	err = run.Get(ctx, &res)
	return
}
-- src/pkg/example/example.go --
package example

import (
	"context"
)

//devx:service
type Service struct {}

type ExampleRequest struct {}
type ExampleResponse struct {}

//devx:endpoint path=/example method=POST,GET
func (s *Service) Example(ctx context.Context, req ExampleRequest) (res ExampleResponse, err error) {
	return
}

//devx:worker workflow
type Workflows struct {}

//devx:workflow
func (*Workflows) Example(ctx context.Context, req ExampleRequest) (res ExampleResponse, err error) {
	return
}

//devx:worker activity
type Activities struct {}

//devx:activity
func (Activities) Example(ctx context.Context, req ExampleRequest) (res ExampleResponse, err error) {
	return
}
-- src/pkg/auth/z_auth.go --
package auth

// service handles authentication
//devx:service
type service struct {}
-- src/pkg/auth/auth_verify.go --
package auth

import ("context")

type VerifyRequest struct {}
type VerifyResponse struct {}

// Send sends an authentication request
//   Here's some other comment related stuff
//devx:endpoint path=/verify method=GET
func (s *service) Verify(ctx context.Context, req VerifyRequest) (res VerifyResponse, err error) {
	return
}
-- src/pkg/auth/auth_worker.go --
package auth

import ("context")

// service handles authentication
//devx:worker workflow
type workflows struct {}

// Verify sends an authentication request
//   Here's some other comment related stuff
//devx:workflow
func (*workflows) Verify(ctx context.Context, req VerifyRequest) (res VerifyResponse, err error) {
	return
}

// service handles authentication
//devx:worker activity
type activities struct {}

// Verify sends an authentication request
//   Here's some other comment related stuff
//devx:activity
func (activities) Verify(ctx context.Context, req VerifyRequest) (res VerifyResponse, err error) {
	return
}

//devx:provider
func InitServiceDeps() error {
	return nil
}

//devx:provider
func InitWorkflowDeps() error {
	return nil
}

//devx:provider
func InitActivityDeps() error {
	return nil
}

//devx:provider
type StructProvider struct {}
-- src/pkg/nope/nope.go --
package nope

type nope struct{}
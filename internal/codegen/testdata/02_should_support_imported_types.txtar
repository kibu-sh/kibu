parse $WORK
cmp $WORK/src/systems/foo/foo.gen.go exp/systems/foo/foo.gen.go

-- src/go.mod --
module github.com/example/module

-- src/systems/foo/spec/spec.go --
package spec

type Request struct {}
type Response struct {}

-- src/systems/bar/spec/spec.go --
package spec_2

type Request struct {}
type Response struct {}

-- src/systems/foo/foo.go --
package foo

import (
	"context"
	spec "github.com/example/module/systems/foo/spec"
	spec_2 "github.com/example/module/systems/bar/spec"
)

//kibu:service
type Service struct {}

//kibu:endpoint
func (s *Service) Example(ctx context.Context, req spec.Request) (res spec.Response, err error) {return}

//kibu:endpoint
func (s *Service) Example2(ctx context.Context, req spec_2.Request) (res spec_2.Response, err error) {return}

//kibu:worker workflow
type Workflow struct {}

//kibu:workflow
func (wf *Workflow) Example1(ctx context.Context, req spec.Request) (res spec.Response, err error) {return}

//kibu:workflow
func (wf *Workflow) Example2(ctx context.Context, req spec_2.Request) (res spec_2.Response, err error) {return}

-- exp/systems/foo/foo.gen.go --
// Code generated by kibu. DO NOT EDIT.

package foo

import (
	"context"
	spec1 "github.com/example/module/systems/bar/spec"
	spec "github.com/example/module/systems/foo/spec"
	transport "github.com/kibu-sh/kibu/pkg/transport"
	httpx "github.com/kibu-sh/kibu/pkg/transport/httpx"
	middleware "github.com/kibu-sh/kibu/pkg/transport/middleware"
	temporal "github.com/kibu-sh/kibu/pkg/transport/temporal"
	client "go.temporal.io/sdk/client"
	workflow "go.temporal.io/sdk/workflow"
)

func (svc *Service) HTTPHandlerFactory(middlewareReg *middleware.Registry) []*httpx.Handler {
	return []*httpx.Handler{
		httpx.NewHandler("/foo/Example", transport.NewEndpoint(svc.Example).WithMiddleware(
			middlewareReg.Get(middleware.GetParams{
				ExcludeAuth: false,
				Tags:        []string{},
			})...,
		)).WithMethods("GET"),
		httpx.NewHandler("/foo/Example2", transport.NewEndpoint(svc.Example2).WithMiddleware(
			middlewareReg.Get(middleware.GetParams{
				ExcludeAuth: false,
				Tags:        []string{},
			})...,
		)).WithMethods("GET"),
	}
}
func (wkr *Workflow) WorkerFactory() []*temporal.Worker {
	return []*temporal.Worker{
		&temporal.Worker{
			Name:      "foo.Workflow.Example1",
			Type:      "workflow",
			TaskQueue: "default",
			Handler:   wkr.Example1,
		},
		&temporal.Worker{
			Name:      "foo.Workflow.Example2",
			Type:      "workflow",
			TaskQueue: "default",
			Handler:   wkr.Example2,
		},
	}
}

type Workflow__Client struct {
	Temporal client.Client
}

func (c Workflow__Client) Example1(ctx context.Context, id string, req spec.Request) (temporal.WorkflowRun[spec.Response], error) {
	return temporal.NewWorkflowRunWithErr[spec.Response](
		c.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
			ID:        id,
			TaskQueue: "default",
		}, "foo.Workflow.Example1", req),
	)
}
func (c Workflow__Client) Example2(ctx context.Context, id string, req spec1.Request) (temporal.WorkflowRun[spec1.Response], error) {
	return temporal.NewWorkflowRunWithErr[spec1.Response](
		c.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
			ID:        id,
			TaskQueue: "default",
		}, "foo.Workflow.Example2", req),
	)
}

type Workflow__Proxy struct{}

func (p Workflow__Proxy) Example1(ctx workflow.Context, req spec.Request) temporal.ChildWorkflowFuture[spec.Response] {
	return temporal.NewChildWorkflowFuture[spec.Response](
		workflow.ExecuteChildWorkflow(ctx, "foo.Workflow.Example1", req),
	)
}
func (p Workflow__Proxy) Example2(ctx workflow.Context, req spec1.Request) temporal.ChildWorkflowFuture[spec1.Response] {
	return temporal.NewChildWorkflowFuture[spec1.Response](
		workflow.ExecuteChildWorkflow(ctx, "foo.Workflow.Example2", req),
	)
}

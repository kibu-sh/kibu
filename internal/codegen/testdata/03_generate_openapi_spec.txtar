parse $WORK
cmp exp/systems/foo/foo.gen.go $WORK/src/systems/foo/foo.gen.go

-- src/go.mod --
module github.com/example/module

-- src/systems/foo/foo.go --
package foo

import (
	"context"
)

//devx:worker workflow
type Workflow struct {}

//devx:workflow
func (wf *Workflow) Example(ctx context.Context, _ any) (res any, err error) {return}

-- exp/systems/foo/foo.gen.go --
// Code generated by devx. DO NOT EDIT.

package foo

import (
	"context"
	temporal "github.com/discernhq/devx/pkg/transport/temporal"
	client "go.temporal.io/sdk/client"
	workflow "go.temporal.io/sdk/workflow"
)

func (wkr *Workflow) WorkerFactory() []*temporal.Worker {
	return []*temporal.Worker{
		&temporal.Worker{
			Name:      "foo.Workflow.Example",
			Type:      "workflow",
			TaskQueue: "default",
			Handler:   wkr.Example,
		},
	}
}

type Workflow__Client struct {
	Temporal client.Client
}

func (p Workflow__Client) Example(ctx context.Context, id string, req any) (temporal.WorkflowRun[any], error) {
	return temporal.NewWorkflowRunWithErr[any](
		p.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
			ID:        id,
			TaskQueue: "default",
		}, "foo.Workflow.Example", req),
	)
}

type Workflow__Proxy struct{}

func (p Workflow__Proxy) Example(ctx workflow.Context, req any) temporal.ChildWorkflowFuture[any] {
	return temporal.NewChildWorkflowFuture[any](
		workflow.ExecuteChildWorkflow(ctx, "foo.Workflow.Example", req),
	)
}
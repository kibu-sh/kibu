skip
parse $WORK
cmp exp/gen/openapi.yaml $WORK/gen/openapi.yaml


-- src/go.mod --
module github.com/example/module

-- src/systems/foo/spec/spec.go --
package spec

type Item struct {
	Name string `json:"name"`
}

type Model struct {
  Name string `json:"name"`
  Items []*Item `json:"items"`
}

-- src/systems/foo/foo.go --
package foo

import (
	"context"
	"github.com/example/module/systems/foo/spec"
)

//kibu:service
type Service struct {}

type Request struct {
  Name string `json:"name"`
}

type Response struct {
  Name string `json:"name"`
}

type Nested struct {
  Name string `json:"name"`
}

type ListRequest struct {
  Nested []Nested `json:"nested"`
}

type ListResponse struct {
  Nested []Nested `json:"nested"`
}

type EmbeddedRequest struct {
  Nested `json:"nested"`
}

type EmbeddedResponse struct {
  Nested `json:"nested"`
}

type EmbeddedImportRequest struct {
  spec.Model `json:"model"`
}

type EmbeddedImportResponse struct {
  spec.Model `json:"model"`
}

//kibu:endpoint
func (svc *Service) GetData(ctx context.Context, req Request) (res Response, err error) {return}

//kibu:endpoint
func (svc *Service) GetList(ctx context.Context, req ListRequest) (res ListResponse, err error) {return}

//kibu:endpoint
func (svc *Service) GetAny(ctx context.Context, req any) (res any, err error) {return}

//kibu:endpoint
func (svc *Service) GetAnyIgnored(ctx context.Context, _ any) (_ any, err error) {return}

//kibu:endpoint
func (svc *Service) GetEmbedded(ctx context.Context, req EmbeddedRequest) (res EmbeddedResponse, err error) {return}

//kibu:endpoint
func (svc *Service) GetEmbeddedImport(ctx context.Context, req EmbeddedImportRequest) (res EmbeddedImportResponse, err error) {return}

-- exp/gen/openapi.yaml --
openapi: 3.1.0
info:
    title: Discern API
    contact:
        name: MN3, Inc.
        email: support@discern.com
    version: 0.0.1
parse $WORK
cmp exp/systems/foo/foo.gen.go $WORK/src/systems/foo/foo.gen.go

-- src/go.mod --
module github.com/example/module

-- src/systems/foo/a.go --
package foo

import (
	"context"
)

type Request struct {}
type Response struct {}

//kibue:service
type Service struct {}

//kibue:worker workflow
type Workflow struct {}

// a should be supported
func (s *Service) a() {}

// a should be supported
func (wf *Workflow) a() {}

-- src/systems/foo/service_methods.go --
package foo

import (
	"context"
)

//kibue:endpoint
func (s *Service) A(ctx context.Context, req Request) (res Response, err error) {
	s.a()
	return
}

//kibue:endpoint
func (s *Service) Z(ctx context.Context, req Request) (res Response, err error) {
	s.a()
	return
}

-- src/systems/foo/worker_methods.go --
package foo

import (
	"context"
)

//kibue:workflow
func (wf *Workflow) A(ctx context.Context, req Request) (res Response, err error) {
    wf.a()
	return
}

//kibue:workflow
func (wf *Workflow) Z(ctx context.Context, req Request) (res Response, err error) {
	wf.a()
	return
}

-- exp/systems/foo/foo.gen.go --
// Code generated by kibue. DO NOT EDIT.

package foo

import (
	"context"
	transport "github.com/kibu-sh/kibu/pkg/transport"
	httpx "github.com/kibu-sh/kibu/pkg/transport/httpx"
	middleware "github.com/kibu-sh/kibu/pkg/transport/middleware"
	temporal "github.com/kibu-sh/kibu/pkg/transport/temporal"
	client "go.temporal.io/sdk/client"
	workflow "go.temporal.io/sdk/workflow"
)

func (svc *Service) HTTPHandlerFactory(middlewareReg *middleware.Registry) []*httpx.Handler {
	return []*httpx.Handler{
		httpx.NewHandler("/foo/A", transport.NewEndpoint(svc.A).WithMiddleware(
			middlewareReg.Get(middleware.GetParams{
				ExcludeAuth: false,
				Tags:        []string{},
			})...,
		)).WithMethods("GET"),
		httpx.NewHandler("/foo/Z", transport.NewEndpoint(svc.Z).WithMiddleware(
			middlewareReg.Get(middleware.GetParams{
				ExcludeAuth: false,
				Tags:        []string{},
			})...,
		)).WithMethods("GET"),
	}
}
func (wkr *Workflow) WorkerFactory() []*temporal.Worker {
	return []*temporal.Worker{
		&temporal.Worker{
			Name:      "foo.Workflow.A",
			Type:      "workflow",
			TaskQueue: "default",
			Handler:   wkr.A,
		},
		&temporal.Worker{
			Name:      "foo.Workflow.Z",
			Type:      "workflow",
			TaskQueue: "default",
			Handler:   wkr.Z,
		},
	}
}

type Workflow__Client struct {
	Temporal client.Client
}

func (p Workflow__Client) A(ctx context.Context, id string, req Request) (temporal.WorkflowRun[Response], error) {
	return temporal.NewWorkflowRunWithErr[Response](
		p.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
			ID:        id,
			TaskQueue: "default",
		}, "foo.Workflow.A", req),
	)
}
func (p Workflow__Client) Z(ctx context.Context, id string, req Request) (temporal.WorkflowRun[Response], error) {
	return temporal.NewWorkflowRunWithErr[Response](
		p.Temporal.ExecuteWorkflow(ctx, client.StartWorkflowOptions{
			ID:        id,
			TaskQueue: "default",
		}, "foo.Workflow.Z", req),
	)
}

type Workflow__Proxy struct{}

func (p Workflow__Proxy) A(ctx workflow.Context, req Request) temporal.ChildWorkflowFuture[Response] {
	return temporal.NewChildWorkflowFuture[Response](
		workflow.ExecuteChildWorkflow(ctx, "foo.Workflow.A", req),
	)
}
func (p Workflow__Proxy) Z(ctx workflow.Context, req Request) temporal.ChildWorkflowFuture[Response] {
	return temporal.NewChildWorkflowFuture[Response](
		workflow.ExecuteChildWorkflow(ctx, "foo.Workflow.Z", req),
	)
}
// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/discernhq/devx/pkg/appcontext"
	"github.com/discernhq/devx/pkg/config"
	"github.com/discernhq/devx/pkg/workspace"
)

import (
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/github"
)

// Injectors from wire.go:

func InitCLI() (RootCmd, error) {
	context := appcontext.Context()
	workspaceConfig, err := workspace.NewWorkspaceConfig()
	if err != nil {
		return RootCmd{}, err
	}
	fileStore, err := workspace.NewDevFileStore(context, workspaceConfig)
	if err != nil {
		return RootCmd{}, err
	}
	newConfigGetCmdParams := NewConfigGetCmdParams{
		Store: fileStore,
	}
	configGetCmd := NewConfigGetCmd(newConfigGetCmdParams)
	configStoreSettings := workspaceConfig.ConfigStore
	newConfigSetCmdParams := NewConfigSetCmdParams{
		Store:    fileStore,
		Settings: configStoreSettings,
	}
	configSetCmd := NewConfigSetCmd(newConfigSetCmdParams)
	workspaceConfigStoreSettings := &workspaceConfig.ConfigStore
	encryptedFileEditor := config.NewEncryptedFileEditor(fileStore)
	newConfigEditCmdParams := NewConfigEditCmdParams{
		ConfigStoreSettings: workspaceConfigStoreSettings,
		EncryptedFileEditor: encryptedFileEditor,
	}
	configEditCmd := NewConfigEditCmd(newConfigEditCmdParams)
	newConfigSyncCmdParams := NewConfigSyncCmdParams{
		ConfigStoreSettings: workspaceConfigStoreSettings,
		Store:               fileStore,
	}
	configSyncCmd := NewConfigSyncCmd(newConfigSyncCmdParams)
	configCmdParams := ConfigCmdParams{
		ConfigGetCmd:  configGetCmd,
		ConfigSetCmd:  configSetCmd,
		ConfigEditCmd: configEditCmd,
		ConfigSyncCmd: configSyncCmd,
	}
	configCmd := NewConfigCmd(configCmdParams)
	buildCmd := NewBuildCmd()
	newMigrateUpCmdParams := NewMigrateUpCmdParams{}
	migrateUpCmd := NewMigrateUpCmd(newMigrateUpCmdParams)
	newMigrateDownCmdParams := NewMigrateDownCmdParams{}
	migrateDownCmd := NewMigrateDownCmd(newMigrateDownCmdParams)
	newMigrateCmdParams := NewMigrateCmdParams{
		MigrateUpCmd:   migrateUpCmd,
		MigrateDownCmd: migrateDownCmd,
	}
	migrateCmd := NewMigrateCmd(newMigrateCmdParams)
	rootCommandParams := RootCommandParams{
		ConfigCmd:  configCmd,
		BuildCmd:   buildCmd,
		MigrateCmd: migrateCmd,
	}
	rootCmd := NewRootCmd(rootCommandParams)
	return rootCmd, nil
}
